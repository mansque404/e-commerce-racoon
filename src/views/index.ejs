<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>E-commerce Racoon - Simulador de Pedidos</title>
    <link rel="icon" type="image/png" href="/images/racoon_logo.png">
    <link rel="stylesheet" href="/css/style.css">
</head>
<body>
    <div class="container">
        <header>
            <img src="/images/racoon_logo.png" alt="E-commerce Racoon Logo" class="logo">
            <h1>E-commerce Racoon</h1>
            <p class="tagline">Simulador de Processamento de 1 Milh√£o de Pedidos com Prioridade</p>
        </header>

        <section class="action-buttons">
            <button onclick="startProcess()">üöÄ Iniciar Simula√ß√£o de Pedidos</button>
            <button onclick="resetProcess()">üßπ Resetar Banco e Filas</button>
        </section>

        <section class="log-section">
            <h2>Logs de Execu√ß√£o Detalhados</h2>
            <pre id="logs">Aguardando in√≠cio da simula√ß√£o. Clique em "Iniciar Simula√ß√£o de Pedidos" para come√ßar...</pre>
        </section>
    </div>

    <footer>
        <p>&copy; <%= new Date().getFullYear() %> E-commerce Racoon. Todos os direitos reservados.</p>
        <p>Desenvolvido para demonstra√ß√£o de backend escal√°vel.</p>
    </footer>

    <script>
        async function startProcess() {
            document.getElementById('logs').innerText = 'Iniciando simula√ß√£o... Gerando 1 milh√£o de pedidos, enfileirando e processando. Isso pode levar um tempo consider√°vel. Por favor, aguarde.';
            
            try {
                const response = await fetch('/start-process', { method: 'POST' });
                const data = await response.json();
                console.log('Processo iniciado:', data.message);
                const logInterval = setInterval(async () => {
                    const statusResponse = await fetch('/pedidos');
                    const statusData = await statusResponse.json();
                    document.getElementById('logs').innerText = JSON.stringify(statusData, null, 2);
                    
                    if (statusData.status === 'COMPLETED' || statusData.status === 'ERROR') {
                        clearInterval(logInterval);
                        console.log('Simula√ß√£o conclu√≠da ou com erro. Atualiza√ß√µes autom√°ticas de log paradas.');
                    }
                }, 5000);
            } catch (error) {
                document.getElementById('logs').innerText = `Erro ao iniciar processo: ${error.message}`;
                console.error('Erro ao iniciar processo:', error);
            }
        }

        async function resetProcess() {
            if (confirm('Tem certeza que deseja limpar o banco de dados e as filas? Esta a√ß√£o √© irrevers√≠vel.')) {
                document.getElementById('logs').innerText = 'Resetando o banco de dados e as filas...';
                try {
                    const response = await fetch('/reset', { method: 'POST' });
                    const data = await response.json();
                    document.getElementById('logs').innerText = `Reset conclu√≠do: ${data.message}\nAguardando in√≠cio da simula√ß√£o.`;
                    console.log('Reset conclu√≠do:', data.message);
                } catch (error) {
                    document.getElementById('logs').innerText = `Erro ao resetar: ${error.message}`;
                    console.error('Erro ao resetar:', error);
                }
            }
        }

        window.onload = updateInitialLogs;

        async function updateInitialLogs() {
            try {
                const response = await fetch('/pedidos');
                const data = await response.json();
                if (data.status !== 'IDLE') {
                    document.getElementById('logs').innerText = JSON.stringify(data, null, 2);
                }
            } catch (error) {
                console.error('Erro ao carregar logs iniciais:', error);
            }
        }
    </script>
</body>
</html>